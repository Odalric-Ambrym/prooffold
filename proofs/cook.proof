\newcommand{\mtlogconfigurationvecp}{\vec p}
        \newcommand{\mtlogetat}[1]{p_{state = #1}}
\newcommand{\mtlogcurseur}[1]{p_{curpos = #1}}
\newcommand{\mtruban}[2]{p_{tape[#1] = #2}}

\newcommand{\aumoinsunevraie}[1]{\# (#1) {\geq}1}
\newcommand{\auplusunevraie}[1]{\# (#1) {\leq} 1}
\newcommand{\exactementunevraie}[1]{\# (#1) {=} 1}
\newcommand{\suchthat}{\mid}
\newcommand{\set}[1]{\{#1\}}
\newcommand\caserubanindices{\set{1, \dots, f(w)}}
\newcommand{\lbigand}{\bigwedge}
\newcommand{\lbigor}{\bigvee}
\newcommand{\limply}{\rightarrow}
\newcommand{\lequiv}{\leftrightarrow}


Theorem. (Cook) SAT is NP-complete.
{
    Proof.
    SAT is in NP.
    {
        We design a non-deterministic algorithm deciding SAT in poly-time.

        algo {
algo($\phi$)
        for all variables $p$ in $\phi$
                $\nu[p]$ := choose 0 or 1

        if $\nu \models \phi$
                accept
        else
                reject
        }
    }

    SAT is NP-hard.
    {
        Consider an NP problem $A$.
        
    Let $M$ a non-deterministic Turing machine deciding $A$ in poly-time $f(n)$.

    W.l.o.g. we suppose that $M$ loops on its accepting state $q_{acc}$.
    {
        We replace the machine $M$ by the following machine:

        algo {
newmachineM($w$)
        run $M(w)$
        if $M$ accepts $w$
                loop on $q_{acc}$
        }
    }

    Reduce $A$ to SAT in poly-time. Given an $A$-instance $w$, we define a Boolean formula $tr(w)$.
    {
        Given a finite set $P$ of propositional variables, define $\#(P) = 1$, saying that ``exactly one variable in $P$ is true''
        {
            1. We define $\#(P) \geq 1$, saying that ``at least one variable in $P$ is true''
             {
                 to be $\lbigor_{p \in P} p$
                 Example
                 {
                     For $P = \{p_1, p_2, p_3\}$,
                     $\#(\{p_1, p_2, p_3\}) \geq 1$ is the formula $p_1 \lor p_2 \lor p_3$.
                 }
             }
            2. We define $\#(P) \leq 1$ saying that ``at most one variable in $P$ is true''
            {
                to be $\bigwedge_{p, p' \in P, p \neq p'} \lnot p \lor \lnot p'$
                Example
                 {
                     For $P = \{p_1, p_2, p_3\}$,
                     $\#(\{p_1, p_2, p_3\}) \leq 1$ is the formula $(\lnot p_1 \lor \lnot p_2) \land$ $(\lnot p_1 \lor \lnot p_3) \land $ $(\lnot p_1 \lor \lnot  p_3)$.

                     In other words, we prevent that two variables are true.For instance $p_1$ and $p_3$ cannot be both true because formula $(\lnot p_1 \lor \lnot  p_3)$ would be false.
                 }
            }
           
            Formula $\#(P) = 1$ is  $\#(P) \leq 1 \land  \#(P) \geq 1$
        }



       Consider a collection $\vec p$ of propositional variables that contains:
- variable $\mtlogetat q$ saying that the machine is in state $q$
- variable $\mtlogcurseur i$ saying that the cursor is at position $i$
- variable $\mtruban i a$ saying that the cell at position $i$ contains symbol $a$

Define $isConfig(\vec p)$
{
    to be the conjunction of:
 $existenceUnicityState(\vec p)$
 {
      $:= \exactementunevraie{\{ \mtlogetat{q} \suchthat  q \in Q\}}$
      We prevent the machine to be in two different inner states $q$ and $q'$:
          asciiart {
        ┌───┬───┬───┬───┬───┬─
        │ 0 │ 1 │ 0 │ 1 │ 1 │ ... 
        └───┴───┴───┴───┴───┴─
                      ↑
                    q and q'
    }
    We also prevent the machine to be in no inner state:
    asciiart {
        ┌───┬───┬───┬───┬───┬─
        │ 0 │ 1 │ 0 │ 1 │ 1 │ ... 
        └───┴───┴───┴───┴───┴─
                      ↑
                    
    }
 }

$existenceUnicityCursor(\vec p)$
{
    $:= \exactementunevraie{\{\mtlogcurseur{i} \suchthat i \in \caserubanindices\}}$
    We prevent to have multiple cursors:
    asciiart {
        ┌───┬───┬───┬───┬───┬─
        │ 0 │ 1 │ 0 │ 1 │ 1 │ ... 
        └───┴───┴───┴───┴───┴─
          ↑           ↑
          q           q
    }
    We also prevent to have no cursor at all:
    asciiart {
        ┌───┬───┬───┬───┬───┬─
        │ 0 │ 1 │ 0 │ 1 │ 1 │ ... 
        └───┴───┴───┴───┴───┴─
    }
}
$existenceUnicityTape(\vec p)$
{
     $:= \bigwedge_{i \in \caserubanindices} \exactementunevraie{\{\mtruban{i}{a} \suchthat a \in \Gamma\}}$
     We prevent a cell to contain two symbols:
         asciiart {
        ┌───┬───┬───┬───┬───┬─
        │ 0 │ 1 │ 0 │01 │ 1 │ ... 
        └───┴───┴───┴───┴───┴─
                  ↑
                  q
    }
    We also prevent a cell to contain no symbol:
    asciiart {
        ┌───┬───┬───┬───┬───┬─
        │ 0 │ 1 │ 0 │   │ 1 │ ... 
        └───┴───┴───┴───┴───┴─
                  ↑
                  q
    }
}

}

Define $initialConfig(\vec p, w)$
{
    to be the conjunction of:
   $isConfig(\mtlogconfigurationvecp)$
   $\mtlogetat{q_0}$
   $\mtlogcurseur{1}$
   $\lbigand_{i \in \caserubanindices} \mtruban{i}{w_i}$
   where $w_i$ is $\_$ if $i$ is bigger than the length of word $w$
    asciiart {
        ┌───┬───┬───┬───┬───┬─
        │w1 │w2 │w3 │ _ │ _ │ ... 
        └───┴───┴───┴───┴───┴─
          ↑
         q0
    }
}

Define $acceptingConfig(\vec p)$
{
  $ := isConfig(\mtlogconfigurationvecp) \land \mtlogetat{q_{acc}}$.
      asciiart {
        ┌───┬───┬───┬───┬───┬─
        │ 1 │ 0 │ 1 │ 1 │ 0 │ ... 
        └───┴───┴───┴───┴───┴─
              ↑
             qacc
    }
}

Define $succ(\vec p, \vec p')$
{
    Define $symbcur(\mtlogconfigurationvecp, a)$, saying that the symbol under the cursor is $a$
    {
        $:= \lbigor_{i \in \caserubanindices} \mtlogcurseur{i} \limply \mtruban{i}{a}$
              asciiart {
        ┌───┬───┬───┬───┬───┬─
        │ ? │ a │ ? │ ? │ ? │ ... 
        └───┴───┴───┴───┴───┴─
              ↑
              q
    }
    }

    Define $rightMvt(\mtlogconfigurationvecp, \mtlogconfigurationvecp')$ to say that the cursor moved one cell right
    {
$:= \lbigor_{i \in \caserubanindices, i < s}  \mtlogcurseur{i} \land \mtlogcurseur{i+1}'$
    }

    Define $leftMvt(\mtlogconfigurationvecp, \mtlogconfigurationvecp')$ to say that the cursor moved one cell left
    {
        $:= \lbigor_{i \in \caserubanindices, i > 0}  \mtlogcurseur{i} \land \mtlogcurseur{i-1}'$
    }  



    $succ(\vec p, \vec p')$ to be the conjunction of:
    $isConfig(\mtlogconfigurationvecp)$
    $isConfig(\mtlogconfigurationvecp')$

    $sameTapeExcept(\mtlogconfigurationvecp, \mtlogconfigurationvecp')$
    {
        $:= \lbigand_{i \in \caserubanindices} \lnot \mtlogcurseur{i} \limply \lbigand_{a\in Gamma} (\mtruban{i}{a} \lequiv \mtruban{i}{a}')$
    }
    $\lbigor_{(q, a, b, q', \rightarrow) \in \delta} \mtlogetat{q} \land symbcur(\mtlogconfigurationvecp, a) \land symbcur(\mtlogconfigurationvecp', b)\land \mtlogetat{q'} \land rightMvt(\mtlogconfigurationvecp, \mtlogconfigurationvecp')$
    $\lbigor_{(q, a, b, q', \leftarrow) \in \delta} \mtlogetat{q} \land symbcur(\mtlogconfigurationvecp, a) \land symbcur(\mtlogconfigurationvecp', b)\land \mtlogetat{q'} \land leftMvt(\mtlogconfigurationvecp, \mtlogconfigurationvecp')$
 
}

Define $tr(w)$
{
    to be the conjunction of:
    $initialConfig(\vec p_0, w)$
    $\bigwedge_{t =0..f(w)-1} succ(\vec p_t, \vec p_{t+1})$
    $acceptingConfig(\vec p_{f(w)}) $

}



    }

    1. $tr(w)$ is computable in poly-time in $w$

    2. $w$ is $A$ iff $tr(w)$ is satisfiable.


    }





}